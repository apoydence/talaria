// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package router_test

import (
	"time"

	"golang.org/x/net/context"

	"github.com/apoydence/talaria/pb/intra"
	"google.golang.org/grpc/metadata"
)

type mockURIFinder struct {
	FromIDCalled chan bool
	FromIDInput  struct {
		ID chan uint64
	}
	FromIDOutput struct {
		Ret0 chan string
		Ret1 chan error
	}
}

func newMockURIFinder() *mockURIFinder {
	m := &mockURIFinder{}
	m.FromIDCalled = make(chan bool, 100)
	m.FromIDInput.ID = make(chan uint64, 100)
	m.FromIDOutput.Ret0 = make(chan string, 100)
	m.FromIDOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockURIFinder) FromID(ID uint64) (string, error) {
	m.FromIDCalled <- true
	m.FromIDInput.ID <- ID
	return <-m.FromIDOutput.Ret0, <-m.FromIDOutput.Ret1
}

type mockNodeServer struct {
	CreateCalled chan bool
	CreateInput  struct {
		Arg0 chan context.Context
		Arg1 chan *intra.CreateInfo
	}
	CreateOutput struct {
		Ret0 chan *intra.CreateResponse
		Ret1 chan error
	}
	LeaderCalled chan bool
	LeaderInput  struct {
		Arg0 chan context.Context
		Arg1 chan *intra.LeaderRequest
	}
	LeaderOutput struct {
		Ret0 chan *intra.LeaderInfo
		Ret1 chan error
	}
	UpdateCalled chan bool
	UpdateInput  struct {
		Arg0 chan context.Context
		Arg1 chan *intra.UpdateMessage
	}
	UpdateOutput struct {
		Ret0 chan *intra.UpdateResponse
		Ret1 chan error
	}
	UpdateConfigCalled chan bool
	UpdateConfigInput  struct {
		Arg0 chan context.Context
		Arg1 chan *intra.UpdateConfigRequest
	}
	UpdateConfigOutput struct {
		Ret0 chan *intra.UpdateConfigResponse
		Ret1 chan error
	}
	StatusCalled chan bool
	StatusInput  struct {
		Arg0 chan context.Context
		Arg1 chan *intra.StatusRequest
	}
	StatusOutput struct {
		Ret0 chan *intra.StatusResponse
		Ret1 chan error
	}
}

func newMockNodeServer() *mockNodeServer {
	m := &mockNodeServer{}
	m.CreateCalled = make(chan bool, 100)
	m.CreateInput.Arg0 = make(chan context.Context, 100)
	m.CreateInput.Arg1 = make(chan *intra.CreateInfo, 100)
	m.CreateOutput.Ret0 = make(chan *intra.CreateResponse, 100)
	m.CreateOutput.Ret1 = make(chan error, 100)
	m.LeaderCalled = make(chan bool, 100)
	m.LeaderInput.Arg0 = make(chan context.Context, 100)
	m.LeaderInput.Arg1 = make(chan *intra.LeaderRequest, 100)
	m.LeaderOutput.Ret0 = make(chan *intra.LeaderInfo, 100)
	m.LeaderOutput.Ret1 = make(chan error, 100)
	m.UpdateCalled = make(chan bool, 100)
	m.UpdateInput.Arg0 = make(chan context.Context, 100)
	m.UpdateInput.Arg1 = make(chan *intra.UpdateMessage, 100)
	m.UpdateOutput.Ret0 = make(chan *intra.UpdateResponse, 100)
	m.UpdateOutput.Ret1 = make(chan error, 100)
	m.UpdateConfigCalled = make(chan bool, 100)
	m.UpdateConfigInput.Arg0 = make(chan context.Context, 100)
	m.UpdateConfigInput.Arg1 = make(chan *intra.UpdateConfigRequest, 100)
	m.UpdateConfigOutput.Ret0 = make(chan *intra.UpdateConfigResponse, 100)
	m.UpdateConfigOutput.Ret1 = make(chan error, 100)

	m.StatusCalled = make(chan bool, 100)
	m.StatusInput.Arg0 = make(chan context.Context, 100)
	m.StatusInput.Arg1 = make(chan *intra.StatusRequest, 100)
	m.StatusOutput.Ret0 = make(chan *intra.StatusResponse, 100)
	m.StatusOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockNodeServer) Create(arg0 context.Context, arg1 *intra.CreateInfo) (*intra.CreateResponse, error) {
	m.CreateCalled <- true
	m.CreateInput.Arg0 <- arg0
	m.CreateInput.Arg1 <- arg1
	return <-m.CreateOutput.Ret0, <-m.CreateOutput.Ret1
}
func (m *mockNodeServer) Leader(arg0 context.Context, arg1 *intra.LeaderRequest) (*intra.LeaderInfo, error) {
	m.LeaderCalled <- true
	m.LeaderInput.Arg0 <- arg0
	m.LeaderInput.Arg1 <- arg1
	return <-m.LeaderOutput.Ret0, <-m.LeaderOutput.Ret1
}
func (m *mockNodeServer) Update(arg0 context.Context, arg1 *intra.UpdateMessage) (*intra.UpdateResponse, error) {
	m.UpdateCalled <- true
	m.UpdateInput.Arg0 <- arg0
	m.UpdateInput.Arg1 <- arg1
	return <-m.UpdateOutput.Ret0, <-m.UpdateOutput.Ret1
}
func (m *mockNodeServer) UpdateConfig(arg0 context.Context, arg1 *intra.UpdateConfigRequest) (*intra.UpdateConfigResponse, error) {
	m.UpdateConfigCalled <- true
	m.UpdateConfigInput.Arg0 <- arg0
	m.UpdateConfigInput.Arg1 <- arg1
	return <-m.UpdateConfigOutput.Ret0, <-m.UpdateConfigOutput.Ret1
}
func (m *mockNodeServer) Status(arg0 context.Context, arg1 *intra.StatusRequest) (*intra.StatusResponse, error) {
	m.StatusCalled <- true
	m.StatusInput.Arg0 <- arg0
	m.StatusInput.Arg1 <- arg1
	return <-m.StatusOutput.Ret0, <-m.StatusOutput.Ret1
}

type mockContext struct {
	DeadlineCalled chan bool
	DeadlineOutput struct {
		Deadline chan time.Time
		Ok       chan bool
	}
	DoneCalled chan bool
	DoneOutput struct {
		Ret0 chan (<-chan struct{})
	}
	ErrCalled chan bool
	ErrOutput struct {
		Ret0 chan error
	}
	ValueCalled chan bool
	ValueInput  struct {
		Key chan interface{}
	}
	ValueOutput struct {
		Ret0 chan interface{}
	}
}

func newMockContext() *mockContext {
	m := &mockContext{}
	m.DeadlineCalled = make(chan bool, 100)
	m.DeadlineOutput.Deadline = make(chan time.Time, 100)
	m.DeadlineOutput.Ok = make(chan bool, 100)
	m.DoneCalled = make(chan bool, 100)
	m.DoneOutput.Ret0 = make(chan (<-chan struct{}), 100)
	m.ErrCalled = make(chan bool, 100)
	m.ErrOutput.Ret0 = make(chan error, 100)
	m.ValueCalled = make(chan bool, 100)
	m.ValueInput.Key = make(chan interface{}, 100)
	m.ValueOutput.Ret0 = make(chan interface{}, 100)
	return m
}
func (m *mockContext) Deadline() (deadline time.Time, ok bool) {
	m.DeadlineCalled <- true
	return <-m.DeadlineOutput.Deadline, <-m.DeadlineOutput.Ok
}
func (m *mockContext) Done() <-chan struct{} {
	m.DoneCalled <- true
	return <-m.DoneOutput.Ret0
}
func (m *mockContext) Err() error {
	m.ErrCalled <- true
	return <-m.ErrOutput.Ret0
}
func (m *mockContext) Value(key interface{}) interface{} {
	m.ValueCalled <- true
	m.ValueInput.Key <- key
	return <-m.ValueOutput.Ret0
}

type mockNode_UpdatesServer struct {
	SendAndCloseCalled chan bool
	SendAndCloseInput  struct {
		Arg0 chan *intra.UpdateResponse
	}
	SendAndCloseOutput struct {
		Ret0 chan error
	}
	RecvCalled chan bool
	RecvOutput struct {
		Ret0 chan *intra.UpdateMessage
		Ret1 chan error
	}
	SendHeaderCalled chan bool
	SendHeaderInput  struct {
		Arg0 chan metadata.MD
	}
	SendHeaderOutput struct {
		Ret0 chan error
	}
	SetTrailerCalled chan bool
	SetTrailerInput  struct {
		Arg0 chan metadata.MD
	}
	ContextCalled chan bool
	ContextOutput struct {
		Ret0 chan context.Context
	}
	SendMsgCalled chan bool
	SendMsgInput  struct {
		M chan interface{}
	}
	SendMsgOutput struct {
		Ret0 chan error
	}
	RecvMsgCalled chan bool
	RecvMsgInput  struct {
		M chan interface{}
	}
	RecvMsgOutput struct {
		Ret0 chan error
	}
}

func newMockNode_UpdatesServer() *mockNode_UpdatesServer {
	m := &mockNode_UpdatesServer{}
	m.SendAndCloseCalled = make(chan bool, 100)
	m.SendAndCloseInput.Arg0 = make(chan *intra.UpdateResponse, 100)
	m.SendAndCloseOutput.Ret0 = make(chan error, 100)
	m.RecvCalled = make(chan bool, 100)
	m.RecvOutput.Ret0 = make(chan *intra.UpdateMessage, 100)
	m.RecvOutput.Ret1 = make(chan error, 100)
	m.SendHeaderCalled = make(chan bool, 100)
	m.SendHeaderInput.Arg0 = make(chan metadata.MD, 100)
	m.SendHeaderOutput.Ret0 = make(chan error, 100)
	m.SetTrailerCalled = make(chan bool, 100)
	m.SetTrailerInput.Arg0 = make(chan metadata.MD, 100)
	m.ContextCalled = make(chan bool, 100)
	m.ContextOutput.Ret0 = make(chan context.Context, 100)
	m.SendMsgCalled = make(chan bool, 100)
	m.SendMsgInput.M = make(chan interface{}, 100)
	m.SendMsgOutput.Ret0 = make(chan error, 100)
	m.RecvMsgCalled = make(chan bool, 100)
	m.RecvMsgInput.M = make(chan interface{}, 100)
	m.RecvMsgOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockNode_UpdatesServer) SendAndClose(arg0 *intra.UpdateResponse) error {
	m.SendAndCloseCalled <- true
	m.SendAndCloseInput.Arg0 <- arg0
	return <-m.SendAndCloseOutput.Ret0
}
func (m *mockNode_UpdatesServer) Recv() (*intra.UpdateMessage, error) {
	m.RecvCalled <- true
	return <-m.RecvOutput.Ret0, <-m.RecvOutput.Ret1
}
func (m *mockNode_UpdatesServer) SendHeader(arg0 metadata.MD) error {
	m.SendHeaderCalled <- true
	m.SendHeaderInput.Arg0 <- arg0
	return <-m.SendHeaderOutput.Ret0
}
func (m *mockNode_UpdatesServer) SetTrailer(arg0 metadata.MD) {
	m.SetTrailerCalled <- true
	m.SetTrailerInput.Arg0 <- arg0
}
func (m *mockNode_UpdatesServer) Context() context.Context {
	m.ContextCalled <- true
	return <-m.ContextOutput.Ret0
}
func (m *mockNode_UpdatesServer) SendMsg(m_ interface{}) error {
	m.SendMsgCalled <- true
	m.SendMsgInput.M <- m_
	return <-m.SendMsgOutput.Ret0
}
func (m *mockNode_UpdatesServer) RecvMsg(m_ interface{}) error {
	m.RecvMsgCalled <- true
	m.RecvMsgInput.M <- m_
	return <-m.RecvMsgOutput.Ret0
}
