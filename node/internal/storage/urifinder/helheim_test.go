// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package urifinder_test

import (
	"time"

	"golang.org/x/net/context"

	"github.com/apoydence/talaria/pb/intra"
)

type mockSchedulerServer struct {
	FromIDCalled chan bool
	FromIDInput  struct {
		Arg0 chan context.Context
		Arg1 chan *intra.FromIdRequest
	}
	FromIDOutput struct {
		Ret0 chan *intra.FromIdResponse
		Ret1 chan error
	}
}

func newMockSchedulerServer() *mockSchedulerServer {
	m := &mockSchedulerServer{}
	m.FromIDCalled = make(chan bool, 100)
	m.FromIDInput.Arg0 = make(chan context.Context, 100)
	m.FromIDInput.Arg1 = make(chan *intra.FromIdRequest, 100)
	m.FromIDOutput.Ret0 = make(chan *intra.FromIdResponse, 100)
	m.FromIDOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockSchedulerServer) FromID(arg0 context.Context, arg1 *intra.FromIdRequest) (*intra.FromIdResponse, error) {
	m.FromIDCalled <- true
	m.FromIDInput.Arg0 <- arg0
	m.FromIDInput.Arg1 <- arg1
	return <-m.FromIDOutput.Ret0, <-m.FromIDOutput.Ret1
}

type mockContext struct {
	DeadlineCalled chan bool
	DeadlineOutput struct {
		Deadline chan time.Time
		Ok       chan bool
	}
	DoneCalled chan bool
	DoneOutput struct {
		Ret0 chan (<-chan struct{})
	}
	ErrCalled chan bool
	ErrOutput struct {
		Ret0 chan error
	}
	ValueCalled chan bool
	ValueInput  struct {
		Key chan interface{}
	}
	ValueOutput struct {
		Ret0 chan interface{}
	}
}

func newMockContext() *mockContext {
	m := &mockContext{}
	m.DeadlineCalled = make(chan bool, 100)
	m.DeadlineOutput.Deadline = make(chan time.Time, 100)
	m.DeadlineOutput.Ok = make(chan bool, 100)
	m.DoneCalled = make(chan bool, 100)
	m.DoneOutput.Ret0 = make(chan (<-chan struct{}), 100)
	m.ErrCalled = make(chan bool, 100)
	m.ErrOutput.Ret0 = make(chan error, 100)
	m.ValueCalled = make(chan bool, 100)
	m.ValueInput.Key = make(chan interface{}, 100)
	m.ValueOutput.Ret0 = make(chan interface{}, 100)
	return m
}
func (m *mockContext) Deadline() (deadline time.Time, ok bool) {
	m.DeadlineCalled <- true
	return <-m.DeadlineOutput.Deadline, <-m.DeadlineOutput.Ok
}
func (m *mockContext) Done() <-chan struct{} {
	m.DoneCalled <- true
	return <-m.DoneOutput.Ret0
}
func (m *mockContext) Err() error {
	m.ErrCalled <- true
	return <-m.ErrOutput.Ret0
}
func (m *mockContext) Value(key interface{}) interface{} {
	m.ValueCalled <- true
	m.ValueInput.Key <- key
	return <-m.ValueOutput.Ret0
}
