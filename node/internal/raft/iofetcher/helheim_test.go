// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package iofetcher_test

import "time"

type mockRaftCluster struct {
	WriteCalled chan bool
	WriteInput  struct {
		Data    chan []byte
		Timeout chan time.Duration
	}
	WriteOutput struct {
		Ret0 chan error
	}
	ReadAtCalled chan bool
	ReadAtInput  struct {
		Index chan uint64
	}
	ReadAtOutput struct {
		Ret0 chan []byte
		Ret1 chan uint64
		Ret2 chan error
	}
	LastIndexCalled chan bool
	LastIndexOutput struct {
		Ret0 chan uint64
	}
	LeaderCalled chan bool
	LeaderOutput struct {
		Ret0 chan string
	}
	SetExpectedPeersCalled chan bool
	SetExpectedPeersInput  struct {
		Peers chan []string
	}
	ExpectedPeersCalled chan bool
	ExpectedPeersOutput struct {
		Ret0 chan []string
	}
}

func newMockRaftCluster() *mockRaftCluster {
	m := &mockRaftCluster{}
	m.WriteCalled = make(chan bool, 100)
	m.WriteInput.Data = make(chan []byte, 100)
	m.WriteInput.Timeout = make(chan time.Duration, 100)
	m.WriteOutput.Ret0 = make(chan error, 100)
	m.ReadAtCalled = make(chan bool, 100)
	m.ReadAtInput.Index = make(chan uint64, 100)
	m.ReadAtOutput.Ret0 = make(chan []byte, 100)
	m.ReadAtOutput.Ret1 = make(chan uint64, 100)
	m.ReadAtOutput.Ret2 = make(chan error, 100)
	m.LastIndexCalled = make(chan bool, 100)
	m.LastIndexOutput.Ret0 = make(chan uint64, 100)
	m.LeaderCalled = make(chan bool, 100)
	m.LeaderOutput.Ret0 = make(chan string, 100)
	m.SetExpectedPeersCalled = make(chan bool, 100)
	m.SetExpectedPeersInput.Peers = make(chan []string, 100)
	m.ExpectedPeersCalled = make(chan bool, 100)
	m.ExpectedPeersOutput.Ret0 = make(chan []string, 100)
	return m
}
func (m *mockRaftCluster) Write(data []byte, timeout time.Duration) error {
	m.WriteCalled <- true
	m.WriteInput.Data <- data
	m.WriteInput.Timeout <- timeout
	return <-m.WriteOutput.Ret0
}
func (m *mockRaftCluster) ReadAt(index uint64) ([]byte, uint64, error) {
	m.ReadAtCalled <- true
	m.ReadAtInput.Index <- index
	return <-m.ReadAtOutput.Ret0, <-m.ReadAtOutput.Ret1, <-m.ReadAtOutput.Ret2
}
func (m *mockRaftCluster) LastIndex() uint64 {
	m.LastIndexCalled <- true
	return <-m.LastIndexOutput.Ret0
}
func (m *mockRaftCluster) Leader() string {
	m.LeaderCalled <- true
	return <-m.LeaderOutput.Ret0
}
func (m *mockRaftCluster) SetExpectedPeers(peers []string) {
	m.SetExpectedPeersCalled <- true
	m.SetExpectedPeersInput.Peers <- peers
}
func (m *mockRaftCluster) ExpectedPeers() []string {
	m.ExpectedPeersCalled <- true
	return <-m.ExpectedPeersOutput.Ret0
}
