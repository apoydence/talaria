// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package server_test

import (
	"time"

	"github.com/apoydence/talaria/node/internal/server"
	"golang.org/x/net/context"
)

type mockReader struct {
	ReadAtCalled chan bool
	ReadAtInput  struct {
		Index chan uint64
	}
	ReadAtOutput struct {
		Ret0 chan []byte
		Ret1 chan uint64
		Ret2 chan error
	}
	LastIndexCalled chan bool
	LastIndexOutput struct {
		Ret0 chan uint64
	}
}

func newMockReader() *mockReader {
	m := &mockReader{}
	m.ReadAtCalled = make(chan bool, 100)
	m.ReadAtInput.Index = make(chan uint64, 100)
	m.ReadAtOutput.Ret0 = make(chan []byte, 100)
	m.ReadAtOutput.Ret1 = make(chan uint64, 100)
	m.ReadAtOutput.Ret2 = make(chan error, 100)
	m.LastIndexCalled = make(chan bool, 100)
	m.LastIndexOutput.Ret0 = make(chan uint64, 100)
	return m
}
func (m *mockReader) ReadAt(index uint64) ([]byte, uint64, error) {
	m.ReadAtCalled <- true
	m.ReadAtInput.Index <- index
	return <-m.ReadAtOutput.Ret0, <-m.ReadAtOutput.Ret1, <-m.ReadAtOutput.Ret2
}
func (m *mockReader) LastIndex() uint64 {
	m.LastIndexCalled <- true
	return <-m.LastIndexOutput.Ret0
}

type mockWriter struct {
	ProposeCalled chan bool
	ProposeInput  struct {
		Ctx  chan context.Context
		Data chan []byte
	}
	ProposeOutput struct {
		Ret0 chan error
	}
}

func newMockWriter() *mockWriter {
	m := &mockWriter{}
	m.ProposeCalled = make(chan bool, 100)
	m.ProposeInput.Ctx = make(chan context.Context, 100)
	m.ProposeInput.Data = make(chan []byte, 100)
	m.ProposeOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockWriter) Propose(ctx context.Context, data []byte) error {
	m.ProposeCalled <- true
	m.ProposeInput.Ctx <- ctx
	m.ProposeInput.Data <- data
	return <-m.ProposeOutput.Ret0
}

type mockIOFetcher struct {
	FetchWriterCalled chan bool
	FetchWriterInput  struct {
		Name chan string
	}
	FetchWriterOutput struct {
		Ret0 chan server.Writer
		Ret1 chan error
	}
	FetchReaderCalled chan bool
	FetchReaderInput  struct {
		Name chan string
	}
	FetchReaderOutput struct {
		Ret0 chan server.Reader
		Ret1 chan error
	}
}

func newMockIOFetcher() *mockIOFetcher {
	m := &mockIOFetcher{}
	m.FetchWriterCalled = make(chan bool, 100)
	m.FetchWriterInput.Name = make(chan string, 100)
	m.FetchWriterOutput.Ret0 = make(chan server.Writer, 100)
	m.FetchWriterOutput.Ret1 = make(chan error, 100)
	m.FetchReaderCalled = make(chan bool, 100)
	m.FetchReaderInput.Name = make(chan string, 100)
	m.FetchReaderOutput.Ret0 = make(chan server.Reader, 100)
	m.FetchReaderOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockIOFetcher) FetchWriter(name string) (server.Writer, error) {
	m.FetchWriterCalled <- true
	m.FetchWriterInput.Name <- name
	return <-m.FetchWriterOutput.Ret0, <-m.FetchWriterOutput.Ret1
}
func (m *mockIOFetcher) FetchReader(name string) (server.Reader, error) {
	m.FetchReaderCalled <- true
	m.FetchReaderInput.Name <- name
	return <-m.FetchReaderOutput.Ret0, <-m.FetchReaderOutput.Ret1
}

type mockContext struct {
	DeadlineCalled chan bool
	DeadlineOutput struct {
		Deadline chan time.Time
		Ok       chan bool
	}
	DoneCalled chan bool
	DoneOutput struct {
		Ret0 chan (<-chan struct{})
	}
	ErrCalled chan bool
	ErrOutput struct {
		Ret0 chan error
	}
	ValueCalled chan bool
	ValueInput  struct {
		Key chan interface{}
	}
	ValueOutput struct {
		Ret0 chan interface{}
	}
}

func newMockContext() *mockContext {
	m := &mockContext{}
	m.DeadlineCalled = make(chan bool, 100)
	m.DeadlineOutput.Deadline = make(chan time.Time, 100)
	m.DeadlineOutput.Ok = make(chan bool, 100)
	m.DoneCalled = make(chan bool, 100)
	m.DoneOutput.Ret0 = make(chan (<-chan struct{}), 100)
	m.ErrCalled = make(chan bool, 100)
	m.ErrOutput.Ret0 = make(chan error, 100)
	m.ValueCalled = make(chan bool, 100)
	m.ValueInput.Key = make(chan interface{}, 100)
	m.ValueOutput.Ret0 = make(chan interface{}, 100)
	return m
}
func (m *mockContext) Deadline() (deadline time.Time, ok bool) {
	m.DeadlineCalled <- true
	return <-m.DeadlineOutput.Deadline, <-m.DeadlineOutput.Ok
}
func (m *mockContext) Done() <-chan struct{} {
	m.DoneCalled <- true
	return <-m.DoneOutput.Ret0
}
func (m *mockContext) Err() error {
	m.ErrCalled <- true
	return <-m.ErrOutput.Ret0
}
func (m *mockContext) Value(key interface{}) interface{} {
	m.ValueCalled <- true
	m.ValueInput.Key <- key
	return <-m.ValueOutput.Ret0
}
