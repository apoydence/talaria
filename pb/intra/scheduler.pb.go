// Code generated by protoc-gen-go.
// source: scheduler.proto
// DO NOT EDIT!

package intra

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FromIdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *FromIdRequest) Reset()                    { *m = FromIdRequest{} }
func (m *FromIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FromIdRequest) ProtoMessage()               {}
func (*FromIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type FromIdResponse struct {
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
}

func (m *FromIdResponse) Reset()                    { *m = FromIdResponse{} }
func (m *FromIdResponse) String() string            { return proto.CompactTextString(m) }
func (*FromIdResponse) ProtoMessage()               {}
func (*FromIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func init() {
	proto.RegisterType((*FromIdRequest)(nil), "intra.FromIdRequest")
	proto.RegisterType((*FromIdResponse)(nil), "intra.FromIdResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Scheduler service

type SchedulerClient interface {
	FromID(ctx context.Context, in *FromIdRequest, opts ...grpc.CallOption) (*FromIdResponse, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) FromID(ctx context.Context, in *FromIdRequest, opts ...grpc.CallOption) (*FromIdResponse, error) {
	out := new(FromIdResponse)
	err := grpc.Invoke(ctx, "/intra.Scheduler/FromID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	FromID(context.Context, *FromIdRequest) (*FromIdResponse, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_FromID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FromIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).FromID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Scheduler/FromID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).FromID(ctx, req.(*FromIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intra.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FromID",
			Handler:    _Scheduler_FromID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("scheduler.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x4e, 0xce, 0x48,
	0x4d, 0x29, 0xcd, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0xcc, 0x2b,
	0x29, 0x4a, 0x54, 0x92, 0xe7, 0xe2, 0x75, 0x2b, 0xca, 0xcf, 0xf5, 0x4c, 0x09, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x09,
	0x62, 0xca, 0x4c, 0x51, 0x52, 0xe2, 0xe2, 0x83, 0x29, 0x28, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15,
	0x12, 0xe0, 0x62, 0x2e, 0x2d, 0xca, 0x04, 0x2b, 0xe1, 0x0c, 0x02, 0x31, 0x8d, 0x5c, 0xb8, 0x38,
	0x83, 0x61, 0xc6, 0x0b, 0x99, 0x73, 0xb1, 0x81, 0x35, 0xb8, 0x08, 0x89, 0xe8, 0x81, 0xed, 0xd0,
	0x43, 0xb1, 0x40, 0x4a, 0x14, 0x4d, 0x14, 0x62, 0xaa, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x61, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd, 0x29, 0x9c, 0xfd, 0xab, 0x00, 0x00, 0x00,
}
