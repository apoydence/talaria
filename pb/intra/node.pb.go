// Code generated by protoc-gen-go.
// source: node.proto
// DO NOT EDIT!

/*
Package intra is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	CreateInfo
	CreateResponse
	PeerInfo
	ReadOnlyInfo
	ReadOnlyResponse
	LeaderRequest
	LeaderResponse
	AppendEntriesRequest
	AppendEntriesResponse
	RaftLog
	RequestVoteRequest
	RequestVoteResponse
	UpdateResponse
	UpdateConfigRequest
	UpdateConfigResponse
	StatusRequest
	StatusResponse
	StatusBufferInfo
*/
package intra

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RaftLog_LogType int32

const (
	RaftLog_LogCommand    RaftLog_LogType = 0
	RaftLog_LogNoop       RaftLog_LogType = 1
	RaftLog_LogAddPeer    RaftLog_LogType = 2
	RaftLog_LogRemovePeer RaftLog_LogType = 3
	RaftLog_LogBarrier    RaftLog_LogType = 4
)

var RaftLog_LogType_name = map[int32]string{
	0: "LogCommand",
	1: "LogNoop",
	2: "LogAddPeer",
	3: "LogRemovePeer",
	4: "LogBarrier",
}
var RaftLog_LogType_value = map[string]int32{
	"LogCommand":    0,
	"LogNoop":       1,
	"LogAddPeer":    2,
	"LogRemovePeer": 3,
	"LogBarrier":    4,
}

func (x RaftLog_LogType) String() string {
	return proto.EnumName(RaftLog_LogType_name, int32(x))
}
func (RaftLog_LogType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

type CreateInfo struct {
	Name  string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Peers []*PeerInfo `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
}

func (m *CreateInfo) Reset()                    { *m = CreateInfo{} }
func (m *CreateInfo) String() string            { return proto.CompactTextString(m) }
func (*CreateInfo) ProtoMessage()               {}
func (*CreateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateInfo) GetPeers() []*PeerInfo {
	if m != nil {
		return m.Peers
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PeerInfo struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *PeerInfo) Reset()                    { *m = PeerInfo{} }
func (m *PeerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()               {}
func (*PeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PeerInfo) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type ReadOnlyInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ReadOnlyInfo) Reset()                    { *m = ReadOnlyInfo{} }
func (m *ReadOnlyInfo) String() string            { return proto.CompactTextString(m) }
func (*ReadOnlyInfo) ProtoMessage()               {}
func (*ReadOnlyInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadOnlyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ReadOnlyResponse struct {
}

func (m *ReadOnlyResponse) Reset()                    { *m = ReadOnlyResponse{} }
func (m *ReadOnlyResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadOnlyResponse) ProtoMessage()               {}
func (*ReadOnlyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type LeaderRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *LeaderRequest) Reset()                    { *m = LeaderRequest{} }
func (m *LeaderRequest) String() string            { return proto.CompactTextString(m) }
func (*LeaderRequest) ProtoMessage()               {}
func (*LeaderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LeaderRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LeaderResponse struct {
	Addr string `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
}

func (m *LeaderResponse) Reset()                    { *m = LeaderResponse{} }
func (m *LeaderResponse) String() string            { return proto.CompactTextString(m) }
func (*LeaderResponse) ProtoMessage()               {}
func (*LeaderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LeaderResponse) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type AppendEntriesRequest struct {
	BufferName        string     `protobuf:"bytes,1,opt,name=BufferName,json=bufferName" json:"BufferName,omitempty"`
	Term              uint64     `protobuf:"varint,2,opt,name=Term,json=term" json:"Term,omitempty"`
	Leader            []byte     `protobuf:"bytes,3,opt,name=Leader,json=leader,proto3" json:"Leader,omitempty"`
	PrevLogEntry      uint64     `protobuf:"varint,4,opt,name=PrevLogEntry,json=prevLogEntry" json:"PrevLogEntry,omitempty"`
	PrevLogTerm       uint64     `protobuf:"varint,5,opt,name=PrevLogTerm,json=prevLogTerm" json:"PrevLogTerm,omitempty"`
	Entries           []*RaftLog `protobuf:"bytes,6,rep,name=Entries,json=entries" json:"Entries,omitempty"`
	LeaderCommitIndex uint64     `protobuf:"varint,7,opt,name=LeaderCommitIndex,json=leaderCommitIndex" json:"LeaderCommitIndex,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AppendEntriesRequest) GetBufferName() string {
	if m != nil {
		return m.BufferName
	}
	return ""
}

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeader() []byte {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *AppendEntriesRequest) GetPrevLogEntry() uint64 {
	if m != nil {
		return m.PrevLogEntry
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntries() []*RaftLog {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntriesRequest) GetLeaderCommitIndex() uint64 {
	if m != nil {
		return m.LeaderCommitIndex
	}
	return 0
}

type AppendEntriesResponse struct {
	Term           uint64 `protobuf:"varint,1,opt,name=Term,json=term" json:"Term,omitempty"`
	LastLog        uint64 `protobuf:"varint,2,opt,name=LastLog,json=lastLog" json:"LastLog,omitempty"`
	Success        bool   `protobuf:"varint,3,opt,name=Success,json=success" json:"Success,omitempty"`
	NoRetryBackoff bool   `protobuf:"varint,4,opt,name=NoRetryBackoff,json=noRetryBackoff" json:"NoRetryBackoff,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetLastLog() uint64 {
	if m != nil {
		return m.LastLog
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendEntriesResponse) GetNoRetryBackoff() bool {
	if m != nil {
		return m.NoRetryBackoff
	}
	return false
}

type RaftLog struct {
	Index uint64          `protobuf:"varint,1,opt,name=Index,json=index" json:"Index,omitempty"`
	Term  uint64          `protobuf:"varint,2,opt,name=Term,json=term" json:"Term,omitempty"`
	Type  RaftLog_LogType `protobuf:"varint,3,opt,name=Type,json=type,enum=intra.RaftLog_LogType" json:"Type,omitempty"`
	Data  []byte          `protobuf:"bytes,4,opt,name=Data,json=data,proto3" json:"Data,omitempty"`
}

func (m *RaftLog) Reset()                    { *m = RaftLog{} }
func (m *RaftLog) String() string            { return proto.CompactTextString(m) }
func (*RaftLog) ProtoMessage()               {}
func (*RaftLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RaftLog) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RaftLog) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RaftLog) GetType() RaftLog_LogType {
	if m != nil {
		return m.Type
	}
	return RaftLog_LogCommand
}

func (m *RaftLog) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RequestVoteRequest struct {
	BufferName   string `protobuf:"bytes,1,opt,name=BufferName,json=bufferName" json:"BufferName,omitempty"`
	Term         uint64 `protobuf:"varint,2,opt,name=Term,json=term" json:"Term,omitempty"`
	Candidate    []byte `protobuf:"bytes,3,opt,name=Candidate,json=candidate,proto3" json:"Candidate,omitempty"`
	LastLogIndex uint64 `protobuf:"varint,4,opt,name=LastLogIndex,json=lastLogIndex" json:"LastLogIndex,omitempty"`
	LastLogTerm  uint64 `protobuf:"varint,5,opt,name=LastLogTerm,json=lastLogTerm" json:"LastLogTerm,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RequestVoteRequest) GetBufferName() string {
	if m != nil {
		return m.BufferName
	}
	return ""
}

func (m *RequestVoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidate() []byte {
	if m != nil {
		return m.Candidate
	}
	return nil
}

func (m *RequestVoteRequest) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteResponse struct {
	Term    uint64 `protobuf:"varint,1,opt,name=Term,json=term" json:"Term,omitempty"`
	Peers   []byte `protobuf:"bytes,2,opt,name=Peers,json=peers,proto3" json:"Peers,omitempty"`
	Granted bool   `protobuf:"varint,3,opt,name=Granted,json=granted" json:"Granted,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RequestVoteResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetPeers() []byte {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *RequestVoteResponse) GetGranted() bool {
	if m != nil {
		return m.Granted
	}
	return false
}

type UpdateResponse struct {
	Dropped bool `protobuf:"varint,1,opt,name=dropped" json:"dropped,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UpdateResponse) GetDropped() bool {
	if m != nil {
		return m.Dropped
	}
	return false
}

type UpdateConfigRequest struct {
	Name          string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ExpectedNodes []string `protobuf:"bytes,2,rep,name=expectedNodes" json:"expectedNodes,omitempty"`
}

func (m *UpdateConfigRequest) Reset()                    { *m = UpdateConfigRequest{} }
func (m *UpdateConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigRequest) ProtoMessage()               {}
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UpdateConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateConfigRequest) GetExpectedNodes() []string {
	if m != nil {
		return m.ExpectedNodes
	}
	return nil
}

type UpdateConfigResponse struct {
}

func (m *UpdateConfigResponse) Reset()                    { *m = UpdateConfigResponse{} }
func (m *UpdateConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigResponse) ProtoMessage()               {}
func (*UpdateConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type StatusResponse struct {
	ExternalAddr string              `protobuf:"bytes,1,opt,name=externalAddr" json:"externalAddr,omitempty"`
	Buffers      []*StatusBufferInfo `protobuf:"bytes,2,rep,name=buffers" json:"buffers,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *StatusResponse) GetExternalAddr() string {
	if m != nil {
		return m.ExternalAddr
	}
	return ""
}

func (m *StatusResponse) GetBuffers() []*StatusBufferInfo {
	if m != nil {
		return m.Buffers
	}
	return nil
}

type StatusBufferInfo struct {
	Name          string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ExpectedNodes []string `protobuf:"bytes,2,rep,name=expectedNodes" json:"expectedNodes,omitempty"`
}

func (m *StatusBufferInfo) Reset()                    { *m = StatusBufferInfo{} }
func (m *StatusBufferInfo) String() string            { return proto.CompactTextString(m) }
func (*StatusBufferInfo) ProtoMessage()               {}
func (*StatusBufferInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StatusBufferInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatusBufferInfo) GetExpectedNodes() []string {
	if m != nil {
		return m.ExpectedNodes
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateInfo)(nil), "intra.CreateInfo")
	proto.RegisterType((*CreateResponse)(nil), "intra.CreateResponse")
	proto.RegisterType((*PeerInfo)(nil), "intra.PeerInfo")
	proto.RegisterType((*ReadOnlyInfo)(nil), "intra.ReadOnlyInfo")
	proto.RegisterType((*ReadOnlyResponse)(nil), "intra.ReadOnlyResponse")
	proto.RegisterType((*LeaderRequest)(nil), "intra.LeaderRequest")
	proto.RegisterType((*LeaderResponse)(nil), "intra.LeaderResponse")
	proto.RegisterType((*AppendEntriesRequest)(nil), "intra.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "intra.AppendEntriesResponse")
	proto.RegisterType((*RaftLog)(nil), "intra.RaftLog")
	proto.RegisterType((*RequestVoteRequest)(nil), "intra.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "intra.RequestVoteResponse")
	proto.RegisterType((*UpdateResponse)(nil), "intra.UpdateResponse")
	proto.RegisterType((*UpdateConfigRequest)(nil), "intra.UpdateConfigRequest")
	proto.RegisterType((*UpdateConfigResponse)(nil), "intra.UpdateConfigResponse")
	proto.RegisterType((*StatusRequest)(nil), "intra.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "intra.StatusResponse")
	proto.RegisterType((*StatusBufferInfo)(nil), "intra.StatusBufferInfo")
	proto.RegisterEnum("intra.RaftLog_LogType", RaftLog_LogType_name, RaftLog_LogType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	Create(ctx context.Context, in *CreateInfo, opts ...grpc.CallOption) (*CreateResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	ReadOnly(ctx context.Context, in *ReadOnlyInfo, opts ...grpc.CallOption) (*ReadOnlyResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Leader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Create(ctx context.Context, in *CreateInfo, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/intra.Node/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	out := new(UpdateConfigResponse)
	err := grpc.Invoke(ctx, "/intra.Node/UpdateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ReadOnly(ctx context.Context, in *ReadOnlyInfo, opts ...grpc.CallOption) (*ReadOnlyResponse, error) {
	out := new(ReadOnlyResponse)
	err := grpc.Invoke(ctx, "/intra.Node/ReadOnly", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/intra.Node/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Leader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderResponse, error) {
	out := new(LeaderResponse)
	err := grpc.Invoke(ctx, "/intra.Node/Leader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	Create(context.Context, *CreateInfo) (*CreateResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	ReadOnly(context.Context, *ReadOnlyInfo) (*ReadOnlyResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Leader(context.Context, *LeaderRequest) (*LeaderResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Node/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Create(ctx, req.(*CreateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Node/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_ReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOnlyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).ReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Node/ReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).ReadOnly(ctx, req.(*ReadOnlyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Node/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Leader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Leader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Node/Leader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Leader(ctx, req.(*LeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intra.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Node_Create_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _Node_UpdateConfig_Handler,
		},
		{
			MethodName: "ReadOnly",
			Handler:    _Node_ReadOnly_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Node_Status_Handler,
		},
		{
			MethodName: "Leader",
			Handler:    _Node_Leader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// Client API for NodeRaft service

type NodeRaftClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
}

type nodeRaftClient struct {
	cc *grpc.ClientConn
}

func NewNodeRaftClient(cc *grpc.ClientConn) NodeRaftClient {
	return &nodeRaftClient{cc}
}

func (c *nodeRaftClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/intra.NodeRaft/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRaftClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/intra.NodeRaft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeRaft service

type NodeRaftServer interface {
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
}

func RegisterNodeRaftServer(s *grpc.Server, srv NodeRaftServer) {
	s.RegisterService(&_NodeRaft_serviceDesc, srv)
}

func _NodeRaft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.NodeRaft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRaftServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRaft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.NodeRaft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRaftServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeRaft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intra.NodeRaft",
	HandlerType: (*NodeRaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _NodeRaft_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _NodeRaft_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0x3a, 0x6b, 0xaf, 0x73, 0x6c, 0x6f, 0x9d, 0x89, 0x93, 0x1a, 0x53, 0x55, 0xd6, 0x50,
	0x90, 0x55, 0xa1, 0x48, 0x04, 0x24, 0x24, 0xee, 0x92, 0x00, 0x55, 0x24, 0x2b, 0x8d, 0xa6, 0x05,
	0xa9, 0x97, 0x53, 0xcf, 0xb1, 0x65, 0x61, 0xef, 0x2c, 0xb3, 0xe3, 0x2a, 0xbe, 0xe3, 0x8e, 0xd7,
	0xe0, 0x01, 0xb8, 0xe5, 0x35, 0x78, 0x26, 0x34, 0x7f, 0xf6, 0xae, 0xb5, 0xf4, 0xa2, 0x77, 0x3b,
	0xe7, 0xe7, 0x3b, 0xe7, 0x7c, 0x73, 0xe6, 0x5b, 0x80, 0x4c, 0x0a, 0xbc, 0xcc, 0x95, 0xd4, 0x92,
	0x34, 0x97, 0x99, 0x56, 0x9c, 0xbe, 0x02, 0xb8, 0x55, 0xc8, 0x35, 0xde, 0x65, 0x73, 0x49, 0x08,
	0xc4, 0x19, 0x5f, 0xe3, 0x30, 0x1a, 0x47, 0x93, 0x13, 0x66, 0xbf, 0xc9, 0x97, 0xd0, 0xcc, 0x11,
	0x55, 0x31, 0x6c, 0x8c, 0x8f, 0x27, 0x9d, 0xab, 0x27, 0x97, 0x36, 0xf1, 0xf2, 0x01, 0x51, 0x99,
	0x1c, 0xe6, 0xbc, 0xb4, 0x0f, 0xa9, 0x03, 0x62, 0x58, 0xe4, 0x32, 0x2b, 0x90, 0x3e, 0x87, 0x76,
	0x08, 0x32, 0xc0, 0x5c, 0x08, 0x15, 0x80, 0xcd, 0x37, 0xa5, 0xd0, 0x65, 0xc8, 0xc5, 0xeb, 0x6c,
	0xb5, 0xfd, 0xbf, 0xe2, 0x94, 0x40, 0x3f, 0xc4, 0xec, 0x70, 0xbf, 0x80, 0xde, 0x14, 0xb9, 0x40,
	0xc5, 0xf0, 0xf7, 0x0d, 0x16, 0xba, 0x36, 0xf1, 0x05, 0xa4, 0x21, 0xc8, 0xa5, 0xd5, 0xb6, 0xf0,
	0x47, 0x03, 0x06, 0xd7, 0x79, 0x8e, 0x99, 0xf8, 0x29, 0xd3, 0x6a, 0x89, 0x45, 0x80, 0x7c, 0x0e,
	0x70, 0xb3, 0x99, 0xcf, 0x51, 0xdd, 0xef, 0x81, 0xe1, 0xfd, 0xce, 0x62, 0xc0, 0xde, 0xa2, 0x5a,
	0x0f, 0x1b, 0xe3, 0x68, 0x12, 0xb3, 0x58, 0xa3, 0x5a, 0x93, 0x0b, 0x68, 0xb9, 0x92, 0xc3, 0xe3,
	0x71, 0x34, 0xe9, 0xb2, 0xd6, 0xca, 0x9e, 0x08, 0x85, 0xee, 0x83, 0xc2, 0x0f, 0x53, 0xb9, 0x30,
	0x45, 0xb6, 0xc3, 0xd8, 0xe6, 0x74, 0xf3, 0x92, 0x8d, 0x8c, 0xa1, 0xe3, 0x63, 0x2c, 0x6c, 0xd3,
	0x86, 0x74, 0xf2, 0xbd, 0x89, 0x4c, 0x20, 0xf1, 0x3d, 0x0e, 0x5b, 0xf6, 0x22, 0x52, 0x7f, 0x11,
	0x8c, 0xcf, 0xf5, 0x54, 0x2e, 0x58, 0x82, 0xce, 0x4d, 0xbe, 0x86, 0x53, 0xd7, 0xc7, 0xad, 0x5c,
	0xaf, 0x97, 0xfa, 0x2e, 0x13, 0xf8, 0x38, 0x4c, 0x2c, 0xe2, 0xe9, 0xea, 0xd0, 0x41, 0xff, 0x8c,
	0xe0, 0xfc, 0x80, 0x82, 0x3d, 0x61, 0xb6, 0x99, 0xa8, 0x34, 0xe3, 0x10, 0x92, 0x29, 0x2f, 0x4c,
	0x3d, 0x3f, 0x7a, 0xb2, 0x72, 0x47, 0xe3, 0x79, 0xb3, 0x99, 0xcd, 0xb0, 0x28, 0xec, 0xf8, 0x6d,
	0x96, 0x14, 0xee, 0x48, 0xbe, 0x82, 0xf4, 0x5e, 0x32, 0xd4, 0x6a, 0x7b, 0xc3, 0x67, 0xbf, 0xc9,
	0xf9, 0xdc, 0x32, 0xd0, 0x66, 0x69, 0x56, 0xb1, 0xd2, 0x7f, 0x23, 0x48, 0xfc, 0x30, 0x64, 0x00,
	0x4d, 0xd7, 0xb7, 0x2b, 0xde, 0x5c, 0x9a, 0x43, 0x2d, 0xeb, 0x2f, 0x21, 0x7e, 0xbb, 0xcd, 0xd1,
	0x16, 0x4d, 0xaf, 0x2e, 0xaa, 0xa4, 0x5c, 0x1a, 0xf6, 0xb6, 0x39, 0xb2, 0x58, 0x6f, 0x73, 0x3b,
	0xd1, 0x8f, 0x5c, 0x73, 0x5b, 0xbf, 0xcb, 0x62, 0xc1, 0x35, 0xa7, 0xef, 0x20, 0xf1, 0x41, 0x24,
	0x05, 0x98, 0xca, 0x85, 0x21, 0x87, 0x67, 0xa2, 0x7f, 0x44, 0x3a, 0xd6, 0x75, 0x2f, 0x65, 0xde,
	0x8f, 0xbc, 0xf3, 0x5a, 0x08, 0xb3, 0xd3, 0xfd, 0x06, 0x39, 0x85, 0x9e, 0x61, 0x1d, 0xd7, 0xf2,
	0x03, 0x5a, 0xd3, 0xb1, 0x0f, 0xb9, 0xe1, 0x4a, 0x2d, 0x51, 0xf5, 0x63, 0xfa, 0x77, 0x04, 0xc4,
	0x2f, 0xd4, 0xaf, 0xd2, 0x3c, 0x8c, 0x4f, 0xdf, 0xad, 0x67, 0x70, 0x72, 0xcb, 0x33, 0xb1, 0x14,
	0x5c, 0xa3, 0x5f, 0xaf, 0x93, 0x59, 0x30, 0x98, 0x0d, 0xf3, 0xb7, 0xe2, 0x48, 0xf3, 0x1b, 0xb6,
	0x2a, 0xd9, 0xcc, 0x86, 0xf9, 0x98, 0xf2, 0x86, 0xad, 0xf6, 0x26, 0xfa, 0x0e, 0xce, 0x2a, 0xdd,
	0x7e, 0x64, 0x0d, 0x06, 0xd0, 0x7c, 0xf0, 0x9a, 0x60, 0x5a, 0x71, 0x12, 0x60, 0x56, 0xe0, 0x95,
	0xe2, 0x99, 0x46, 0x11, 0x56, 0x60, 0xe1, 0x8e, 0xf4, 0x25, 0xa4, 0xbf, 0xe4, 0xa2, 0x24, 0x0e,
	0x26, 0x56, 0x28, 0x99, 0xe7, 0x28, 0x2c, 0x70, 0x9b, 0x85, 0x23, 0x7d, 0x0d, 0x67, 0x2e, 0xf6,
	0x56, 0x66, 0xf3, 0xe5, 0xe2, 0x23, 0x8f, 0x9c, 0xbc, 0x80, 0x1e, 0x3e, 0xe6, 0x38, 0xd3, 0x28,
	0xee, 0xa5, 0x40, 0x27, 0x51, 0x27, 0xac, 0x6a, 0xa4, 0x17, 0x30, 0xa8, 0x02, 0x7a, 0x1d, 0x79,
	0x02, 0xbd, 0x37, 0x9a, 0xeb, 0x4d, 0x78, 0xf4, 0x74, 0x01, 0x69, 0x30, 0xf8, 0x2e, 0x29, 0x74,
	0xf1, 0x51, 0xa3, 0xca, 0xf8, 0xea, 0x7a, 0xaf, 0x1d, 0x15, 0x1b, 0xf9, 0x06, 0x12, 0x77, 0x79,
	0x41, 0x21, 0x9f, 0xfa, 0x1d, 0x74, 0x58, 0xee, 0xaa, 0xad, 0x52, 0x86, 0x38, 0x3a, 0x85, 0xfe,
	0xa1, 0xf3, 0xd3, 0xe7, 0xbb, 0xfa, 0xa7, 0x01, 0xb1, 0xf9, 0x22, 0xdf, 0x41, 0xcb, 0x49, 0x30,
	0x39, 0xf5, 0x2d, 0xec, 0xa5, 0x7d, 0x74, 0x5e, 0x31, 0xed, 0x48, 0x38, 0x22, 0x77, 0xd0, 0x2d,
	0xd3, 0x43, 0x46, 0x3e, 0xb0, 0xe6, 0x12, 0x46, 0x9f, 0xd7, 0xfa, 0x76, 0x50, 0x3f, 0x40, 0x3b,
	0xa8, 0x35, 0x39, 0x0b, 0x2f, 0xb1, 0x24, 0xf1, 0xa3, 0xa7, 0x07, 0xc6, 0x52, 0xee, 0xf7, 0xd0,
	0x72, 0x9c, 0x90, 0x41, 0x85, 0xbf, 0x50, 0xfa, 0xfc, 0xc0, 0x5a, 0x4e, 0x74, 0x72, 0xb7, 0x4b,
	0xac, 0xfc, 0x1d, 0x76, 0x89, 0xd5, 0xdf, 0x01, 0x3d, 0xba, 0xfa, 0x2b, 0x82, 0xb6, 0xe1, 0xcd,
	0x68, 0x05, 0x99, 0x42, 0xaf, 0xa2, 0x82, 0x24, 0x8c, 0x5a, 0xf7, 0x7b, 0x18, 0x3d, 0xab, 0x77,
	0xee, 0x7a, 0xfa, 0x19, 0x3a, 0xa5, 0xa7, 0x44, 0x3e, 0xdb, 0x8d, 0x7d, 0x28, 0x06, 0xa3, 0x51,
	0x9d, 0x2b, 0xe0, 0xbc, 0x6f, 0xd9, 0x7f, 0xf5, 0xb7, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7f,
	0x34, 0x26, 0x32, 0xb9, 0x07, 0x00, 0x00,
}
