// Code generated by protoc-gen-go.
// source: node.proto
// DO NOT EDIT!

/*
Package intra is a generated protocol buffer package.

It is generated from these files:
	node.proto
	scheduler.proto

It has these top-level messages:
	CreateInfo
	CreateResponse
	PeerInfo
	LeaderRequest
	LeaderInfo
	UpdateMessage
	UpdateResponse
	UpdateConfigRequest
	UpdateConfigResponse
	StatusRequest
	StatusResponse
	FromIdRequest
	FromIdResponse
*/
package intra

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import raftpb "github.com/coreos/etcd/raft/raftpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpdateResponse_Code int32

const (
	UpdateResponse_Success       UpdateResponse_Code = 0
	UpdateResponse_InvalidID     UpdateResponse_Code = 1
	UpdateResponse_InvalidBuffer UpdateResponse_Code = 2
	UpdateResponse_RetryFailure  UpdateResponse_Code = 3
)

var UpdateResponse_Code_name = map[int32]string{
	0: "Success",
	1: "InvalidID",
	2: "InvalidBuffer",
	3: "RetryFailure",
}
var UpdateResponse_Code_value = map[string]int32{
	"Success":       0,
	"InvalidID":     1,
	"InvalidBuffer": 2,
	"RetryFailure":  3,
}

func (x UpdateResponse_Code) String() string {
	return proto.EnumName(UpdateResponse_Code_name, int32(x))
}
func (UpdateResponse_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type CreateInfo struct {
	Name  string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id    uint64      `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Peers []*PeerInfo `protobuf:"bytes,3,rep,name=peers" json:"peers,omitempty"`
}

func (m *CreateInfo) Reset()                    { *m = CreateInfo{} }
func (m *CreateInfo) String() string            { return proto.CompactTextString(m) }
func (*CreateInfo) ProtoMessage()               {}
func (*CreateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateInfo) GetPeers() []*PeerInfo {
	if m != nil {
		return m.Peers
	}
	return nil
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PeerInfo struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *PeerInfo) Reset()                    { *m = PeerInfo{} }
func (m *PeerInfo) String() string            { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()               {}
func (*PeerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LeaderRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *LeaderRequest) Reset()                    { *m = LeaderRequest{} }
func (m *LeaderRequest) String() string            { return proto.CompactTextString(m) }
func (*LeaderRequest) ProtoMessage()               {}
func (*LeaderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type LeaderInfo struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *LeaderInfo) Reset()                    { *m = LeaderInfo{} }
func (m *LeaderInfo) String() string            { return proto.CompactTextString(m) }
func (*LeaderInfo) ProtoMessage()               {}
func (*LeaderInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type UpdateMessage struct {
	Name     string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Messages []*raftpb.Message `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *UpdateMessage) Reset()                    { *m = UpdateMessage{} }
func (m *UpdateMessage) String() string            { return proto.CompactTextString(m) }
func (*UpdateMessage) ProtoMessage()               {}
func (*UpdateMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateMessage) GetMessages() []*raftpb.Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type UpdateResponse struct {
	Code UpdateResponse_Code `protobuf:"varint,1,opt,name=code,enum=intra.UpdateResponse_Code" json:"code,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type UpdateConfigRequest struct {
	Name   string             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Change *raftpb.ConfChange `protobuf:"bytes,2,opt,name=change" json:"change,omitempty"`
}

func (m *UpdateConfigRequest) Reset()                    { *m = UpdateConfigRequest{} }
func (m *UpdateConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigRequest) ProtoMessage()               {}
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateConfigRequest) GetChange() *raftpb.ConfChange {
	if m != nil {
		return m.Change
	}
	return nil
}

type UpdateConfigResponse struct {
}

func (m *UpdateConfigResponse) Reset()                    { *m = UpdateConfigResponse{} }
func (m *UpdateConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateConfigResponse) ProtoMessage()               {}
func (*UpdateConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type StatusResponse struct {
	Id      uint64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Buffers []string `protobuf:"bytes,2,rep,name=buffers" json:"buffers,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*CreateInfo)(nil), "intra.CreateInfo")
	proto.RegisterType((*CreateResponse)(nil), "intra.CreateResponse")
	proto.RegisterType((*PeerInfo)(nil), "intra.PeerInfo")
	proto.RegisterType((*LeaderRequest)(nil), "intra.LeaderRequest")
	proto.RegisterType((*LeaderInfo)(nil), "intra.LeaderInfo")
	proto.RegisterType((*UpdateMessage)(nil), "intra.UpdateMessage")
	proto.RegisterType((*UpdateResponse)(nil), "intra.UpdateResponse")
	proto.RegisterType((*UpdateConfigRequest)(nil), "intra.UpdateConfigRequest")
	proto.RegisterType((*UpdateConfigResponse)(nil), "intra.UpdateConfigResponse")
	proto.RegisterType((*StatusRequest)(nil), "intra.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "intra.StatusResponse")
	proto.RegisterEnum("intra.UpdateResponse_Code", UpdateResponse_Code_name, UpdateResponse_Code_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Node service

type NodeClient interface {
	Create(ctx context.Context, in *CreateInfo, opts ...grpc.CallOption) (*CreateResponse, error)
	Leader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderInfo, error)
	Update(ctx context.Context, in *UpdateMessage, opts ...grpc.CallOption) (*UpdateResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Create(ctx context.Context, in *CreateInfo, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/intra.Node/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Leader(ctx context.Context, in *LeaderRequest, opts ...grpc.CallOption) (*LeaderInfo, error) {
	out := new(LeaderInfo)
	err := grpc.Invoke(ctx, "/intra.Node/Leader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Update(ctx context.Context, in *UpdateMessage, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/intra.Node/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	out := new(UpdateConfigResponse)
	err := grpc.Invoke(ctx, "/intra.Node/UpdateConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/intra.Node/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	Create(context.Context, *CreateInfo) (*CreateResponse, error)
	Leader(context.Context, *LeaderRequest) (*LeaderInfo, error)
	Update(context.Context, *UpdateMessage) (*UpdateResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Node/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Create(ctx, req.(*CreateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Leader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Leader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Node/Leader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Leader(ctx, req.(*LeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Node/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Update(ctx, req.(*UpdateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Node/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intra.Node/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intra.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Node_Create_Handler,
		},
		{
			MethodName: "Leader",
			Handler:    _Node_Leader_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Node_Update_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _Node_UpdateConfig_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Node_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0x51, 0x8b, 0xd3, 0x40,
	0x10, 0x6e, 0xd2, 0x5e, 0xee, 0x3a, 0xbd, 0xf6, 0xd2, 0xf5, 0x94, 0x10, 0x7d, 0x28, 0x2b, 0x42,
	0x51, 0x4c, 0xa1, 0x27, 0x1c, 0xf8, 0x68, 0x45, 0x29, 0xa8, 0x1c, 0x7b, 0x1c, 0x3e, 0x6f, 0x93,
	0x49, 0x2f, 0x70, 0xcd, 0xc6, 0xdd, 0x8d, 0xe0, 0x4f, 0xf0, 0xcf, 0xf8, 0x1b, 0x25, 0xd9, 0x4d,
	0x74, 0xa5, 0xf8, 0x92, 0x64, 0x77, 0xbe, 0xf9, 0xe6, 0x9b, 0x6f, 0x26, 0x00, 0xa5, 0xc8, 0x30,
	0xa9, 0xa4, 0xd0, 0x82, 0x9c, 0x14, 0xa5, 0x96, 0x3c, 0x7e, 0xbd, 0x2f, 0xf4, 0x7d, 0xbd, 0x4b,
	0x52, 0x71, 0x58, 0xa5, 0x42, 0xa2, 0x50, 0x2b, 0xd4, 0x69, 0xb6, 0x92, 0x3c, 0xd7, 0xed, 0xa3,
	0xda, 0xb5, 0x2f, 0x93, 0x45, 0xbf, 0x02, 0x6c, 0x24, 0x72, 0x8d, 0xdb, 0x32, 0x17, 0x84, 0xc0,
	0xa8, 0xe4, 0x07, 0x8c, 0xbc, 0x85, 0xb7, 0x1c, 0xb3, 0xf6, 0x9b, 0xcc, 0xc0, 0x2f, 0xb2, 0xc8,
	0x5f, 0x78, 0xcb, 0x11, 0xf3, 0x8b, 0x8c, 0xbc, 0x80, 0x93, 0x0a, 0x51, 0xaa, 0x68, 0xb8, 0x18,
	0x2e, 0x27, 0xeb, 0x8b, 0xa4, 0xad, 0x9b, 0xdc, 0x20, 0xca, 0x86, 0x83, 0x99, 0x28, 0x0d, 0x61,
	0x66, 0x88, 0x19, 0xaa, 0x4a, 0x94, 0x0a, 0x69, 0x0c, 0x67, 0x1d, 0xc8, 0x92, 0x7a, 0x1d, 0x29,
	0x7d, 0x0e, 0xd3, 0x4f, 0xc8, 0x33, 0x94, 0x0c, 0xbf, 0xd5, 0xa8, 0xf4, 0x31, 0x25, 0xf4, 0x19,
	0x80, 0x01, 0x1d, 0xa5, 0xb8, 0x81, 0xe9, 0x5d, 0x95, 0x71, 0x8d, 0x9f, 0x51, 0x29, 0xbe, 0xc7,
	0xa3, 0xcd, 0xbc, 0x82, 0xb3, 0x83, 0x09, 0xab, 0xc8, 0xb7, 0xfa, 0x8d, 0x29, 0x89, 0x4d, 0x63,
	0x3d, 0x80, 0xfe, 0xf4, 0x60, 0x66, 0x28, 0xbb, 0x1e, 0x48, 0x02, 0xa3, 0x54, 0x64, 0x86, 0x73,
	0xb6, 0x8e, 0x6d, 0xef, 0x2e, 0x28, 0xd9, 0x88, 0x0c, 0x59, 0x8b, 0xa3, 0x1f, 0x61, 0xd4, 0x9c,
	0xc8, 0x04, 0x4e, 0x6f, 0xeb, 0x34, 0x45, 0xa5, 0xc2, 0x01, 0x99, 0xc2, 0x78, 0x5b, 0x7e, 0xe7,
	0x0f, 0x45, 0xb6, 0x7d, 0x1f, 0x7a, 0x64, 0x0e, 0x53, 0x7b, 0x7c, 0x57, 0xe7, 0x39, 0xca, 0xd0,
	0x27, 0x21, 0x9c, 0x33, 0xd4, 0xf2, 0xc7, 0x07, 0x5e, 0x3c, 0xd4, 0x12, 0xc3, 0x21, 0xbd, 0x83,
	0x47, 0xa6, 0xca, 0x46, 0x94, 0x79, 0xb1, 0xff, 0x8f, 0x4d, 0xe4, 0x25, 0x04, 0xe9, 0x3d, 0x2f,
	0xf7, 0xd8, 0x0e, 0x6d, 0xb2, 0x26, 0x5d, 0x87, 0x4d, 0xea, 0xa6, 0x8d, 0x30, 0x8b, 0xa0, 0x4f,
	0xe0, 0xd2, 0xa5, 0xb5, 0xb3, 0xba, 0x80, 0xe9, 0xad, 0xe6, 0xba, 0x56, 0xb6, 0x10, 0x7d, 0x0b,
	0xb3, 0xee, 0xc2, 0x5a, 0xf1, 0x8f, 0xff, 0x24, 0x82, 0xd3, 0x5d, 0xab, 0xdf, 0x38, 0x3b, 0x66,
	0xdd, 0x71, 0xfd, 0xcb, 0x87, 0xd1, 0x97, 0xc6, 0x85, 0x37, 0x10, 0x98, 0x9d, 0x20, 0x73, 0xeb,
	0xdc, 0x9f, 0xdd, 0x8b, 0x1f, 0x3b, 0x57, 0xbd, 0x92, 0x01, 0xb9, 0x82, 0xc0, 0x8c, 0x9d, 0x5c,
	0x5a, 0x88, 0xb3, 0x2a, 0xf1, 0xdc, 0xb9, 0x6d, 0xb8, 0xe8, 0x80, 0x5c, 0x43, 0x60, 0x1a, 0xeb,
	0x93, 0x9c, 0xe5, 0xe8, 0xab, 0xb9, 0xa3, 0xa3, 0x03, 0xb2, 0x85, 0xf3, 0xbf, 0x1d, 0x21, 0xee,
	0x8c, 0x1d, 0xf7, 0xe3, 0xa7, 0x47, 0x63, 0x3d, 0xd5, 0x35, 0x04, 0xc6, 0xb3, 0x5e, 0x83, 0xe3,
	0x69, 0xaf, 0xc1, 0x35, 0x96, 0x0e, 0x76, 0x41, 0xfb, 0x6f, 0x5e, 0xfd, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xcf, 0x02, 0xd4, 0x05, 0xdf, 0x03, 0x00, 0x00,
}
