// Code generated by protoc-gen-go.
// source: talaria.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BufferInfo struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StartIndex   uint64 `protobuf:"varint,2,opt,name=startIndex" json:"startIndex,omitempty"`
	StartFromEnd bool   `protobuf:"varint,3,opt,name=startFromEnd" json:"startFromEnd,omitempty"`
}

func (m *BufferInfo) Reset()                    { *m = BufferInfo{} }
func (m *BufferInfo) String() string            { return proto.CompactTextString(m) }
func (*BufferInfo) ProtoMessage()               {}
func (*BufferInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type WriteDataPacket struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *WriteDataPacket) Reset()                    { *m = WriteDataPacket{} }
func (m *WriteDataPacket) String() string            { return proto.CompactTextString(m) }
func (*WriteDataPacket) ProtoMessage()               {}
func (*WriteDataPacket) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ReadDataPacket struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Index   uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (m *ReadDataPacket) Reset()                    { *m = ReadDataPacket{} }
func (m *ReadDataPacket) String() string            { return proto.CompactTextString(m) }
func (*ReadDataPacket) ProtoMessage()               {}
func (*ReadDataPacket) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type WriteResponse struct {
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type InfoResponse struct {
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func init() {
	proto.RegisterType((*BufferInfo)(nil), "pb.BufferInfo")
	proto.RegisterType((*WriteDataPacket)(nil), "pb.WriteDataPacket")
	proto.RegisterType((*ReadDataPacket)(nil), "pb.ReadDataPacket")
	proto.RegisterType((*WriteResponse)(nil), "pb.WriteResponse")
	proto.RegisterType((*InfoResponse)(nil), "pb.InfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Talaria service

type TalariaClient interface {
	Write(ctx context.Context, opts ...grpc.CallOption) (Talaria_WriteClient, error)
	Read(ctx context.Context, in *BufferInfo, opts ...grpc.CallOption) (Talaria_ReadClient, error)
}

type talariaClient struct {
	cc *grpc.ClientConn
}

func NewTalariaClient(cc *grpc.ClientConn) TalariaClient {
	return &talariaClient{cc}
}

func (c *talariaClient) Write(ctx context.Context, opts ...grpc.CallOption) (Talaria_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Talaria_serviceDesc.Streams[0], c.cc, "/pb.Talaria/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &talariaWriteClient{stream}
	return x, nil
}

type Talaria_WriteClient interface {
	Send(*WriteDataPacket) error
	CloseAndRecv() (*WriteResponse, error)
	grpc.ClientStream
}

type talariaWriteClient struct {
	grpc.ClientStream
}

func (x *talariaWriteClient) Send(m *WriteDataPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *talariaWriteClient) CloseAndRecv() (*WriteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *talariaClient) Read(ctx context.Context, in *BufferInfo, opts ...grpc.CallOption) (Talaria_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Talaria_serviceDesc.Streams[1], c.cc, "/pb.Talaria/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &talariaReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Talaria_ReadClient interface {
	Recv() (*ReadDataPacket, error)
	grpc.ClientStream
}

type talariaReadClient struct {
	grpc.ClientStream
}

func (x *talariaReadClient) Recv() (*ReadDataPacket, error) {
	m := new(ReadDataPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Talaria service

type TalariaServer interface {
	Write(Talaria_WriteServer) error
	Read(*BufferInfo, Talaria_ReadServer) error
}

func RegisterTalariaServer(s *grpc.Server, srv TalariaServer) {
	s.RegisterService(&_Talaria_serviceDesc, srv)
}

func _Talaria_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TalariaServer).Write(&talariaWriteServer{stream})
}

type Talaria_WriteServer interface {
	SendAndClose(*WriteResponse) error
	Recv() (*WriteDataPacket, error)
	grpc.ServerStream
}

type talariaWriteServer struct {
	grpc.ServerStream
}

func (x *talariaWriteServer) SendAndClose(m *WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *talariaWriteServer) Recv() (*WriteDataPacket, error) {
	m := new(WriteDataPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Talaria_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BufferInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TalariaServer).Read(m, &talariaReadServer{stream})
}

type Talaria_ReadServer interface {
	Send(*ReadDataPacket) error
	grpc.ServerStream
}

type talariaReadServer struct {
	grpc.ServerStream
}

func (x *talariaReadServer) Send(m *ReadDataPacket) error {
	return x.ServerStream.SendMsg(m)
}

var _Talaria_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Talaria",
	HandlerType: (*TalariaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _Talaria_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _Talaria_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("talaria.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0x6d, 0x6a, 0x75, 0x48, 0x5b, 0x1d, 0x3d, 0x84, 0x1e, 0x24, 0xec, 0x29, 0xa7,
	0x20, 0xf6, 0x07, 0x28, 0xa2, 0x42, 0x6f, 0xb2, 0x08, 0x9e, 0x27, 0x66, 0x22, 0x41, 0xb3, 0x09,
	0xbb, 0x5b, 0xf0, 0xe7, 0xcb, 0x6e, 0x6d, 0x4d, 0xa4, 0xb7, 0xf9, 0x5e, 0x66, 0x32, 0xef, 0xcd,
	0xc2, 0xdc, 0xd1, 0x17, 0x99, 0x9a, 0xf2, 0xce, 0xb4, 0xae, 0xc5, 0x71, 0x57, 0xc8, 0x12, 0xe0,
	0x61, 0x5b, 0x55, 0x6c, 0x36, 0xba, 0x6a, 0x11, 0x21, 0xd2, 0xd4, 0x70, 0x22, 0x52, 0x91, 0x9d,
	0xa9, 0x50, 0xe3, 0x35, 0x80, 0x75, 0x64, 0xdc, 0x46, 0x97, 0xfc, 0x9d, 0x8c, 0x53, 0x91, 0x45,
	0xaa, 0xa7, 0xa0, 0x84, 0x38, 0xd0, 0xb3, 0x69, 0x9b, 0x27, 0x5d, 0x26, 0x93, 0x54, 0x64, 0xa7,
	0x6a, 0xa0, 0xc9, 0x3b, 0x58, 0xbe, 0x99, 0xda, 0xf1, 0x23, 0x39, 0x7a, 0xa1, 0xf7, 0x4f, 0x76,
	0x47, 0x57, 0x25, 0x30, 0x6b, 0xd8, 0x5a, 0xfa, 0xe0, 0xb0, 0x27, 0x56, 0x7b, 0x94, 0xf7, 0xb0,
	0x50, 0x4c, 0x65, 0x6f, 0xbe, 0xd7, 0x2b, 0x06, 0xbd, 0x78, 0x05, 0xd3, 0xba, 0xe7, 0x75, 0x07,
	0x72, 0x09, 0xf3, 0x60, 0x41, 0xb1, 0xed, 0x5a, 0x6d, 0x59, 0xa6, 0x10, 0xfb, 0xcc, 0x7b, 0xc6,
	0x73, 0x98, 0x6c, 0x4d, 0xfd, 0xeb, 0xc7, 0x97, 0xb7, 0x1a, 0x66, 0xaf, 0xbb, 0x83, 0xe1, 0x1a,
	0xa6, 0x61, 0x1a, 0x2f, 0xf3, 0xae, 0xc8, 0xff, 0x65, 0x59, 0x5d, 0x1c, 0xc4, 0xc3, 0xdf, 0x47,
	0x99, 0xc0, 0x1c, 0x22, 0x6f, 0x1a, 0x17, 0xfe, 0xf3, 0xdf, 0x95, 0x57, 0xe8, 0x79, 0x18, 0x47,
	0x8e, 0x6e, 0x44, 0x71, 0x12, 0x9e, 0x65, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x07, 0x9e, 0x31,
	0xa5, 0xa7, 0x01, 0x00, 0x00,
}
