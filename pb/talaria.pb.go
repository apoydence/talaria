// Code generated by protoc-gen-go.
// source: talaria.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	talaria.proto

It has these top-level messages:
	BufferInfo
	WriteDataPacket
	ReadDataPacket
	CreateResponse
	WriteResponse
	InfoResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BufferInfo struct {
	Name         string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	StartIndex   uint64 `protobuf:"varint,2,opt,name=startIndex" json:"startIndex,omitempty"`
	StartFromEnd bool   `protobuf:"varint,3,opt,name=startFromEnd" json:"startFromEnd,omitempty"`
}

func (m *BufferInfo) Reset()                    { *m = BufferInfo{} }
func (m *BufferInfo) String() string            { return proto.CompactTextString(m) }
func (*BufferInfo) ProtoMessage()               {}
func (*BufferInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type WriteDataPacket struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *WriteDataPacket) Reset()                    { *m = WriteDataPacket{} }
func (m *WriteDataPacket) String() string            { return proto.CompactTextString(m) }
func (*WriteDataPacket) ProtoMessage()               {}
func (*WriteDataPacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ReadDataPacket struct {
	Message []byte `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Index   uint64 `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (m *ReadDataPacket) Reset()                    { *m = ReadDataPacket{} }
func (m *ReadDataPacket) String() string            { return proto.CompactTextString(m) }
func (*ReadDataPacket) ProtoMessage()               {}
func (*ReadDataPacket) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CreateResponse struct {
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type WriteResponse struct {
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type InfoResponse struct {
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*BufferInfo)(nil), "pb.BufferInfo")
	proto.RegisterType((*WriteDataPacket)(nil), "pb.WriteDataPacket")
	proto.RegisterType((*ReadDataPacket)(nil), "pb.ReadDataPacket")
	proto.RegisterType((*CreateResponse)(nil), "pb.CreateResponse")
	proto.RegisterType((*WriteResponse)(nil), "pb.WriteResponse")
	proto.RegisterType((*InfoResponse)(nil), "pb.InfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Talaria service

type TalariaClient interface {
	Create(ctx context.Context, in *BufferInfo, opts ...grpc.CallOption) (*CreateResponse, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (Talaria_WriteClient, error)
	Read(ctx context.Context, in *BufferInfo, opts ...grpc.CallOption) (Talaria_ReadClient, error)
	Info(ctx context.Context, in *BufferInfo, opts ...grpc.CallOption) (*InfoResponse, error)
}

type talariaClient struct {
	cc *grpc.ClientConn
}

func NewTalariaClient(cc *grpc.ClientConn) TalariaClient {
	return &talariaClient{cc}
}

func (c *talariaClient) Create(ctx context.Context, in *BufferInfo, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/pb.Talaria/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talariaClient) Write(ctx context.Context, opts ...grpc.CallOption) (Talaria_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Talaria_serviceDesc.Streams[0], c.cc, "/pb.Talaria/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &talariaWriteClient{stream}
	return x, nil
}

type Talaria_WriteClient interface {
	Send(*WriteDataPacket) error
	CloseAndRecv() (*WriteResponse, error)
	grpc.ClientStream
}

type talariaWriteClient struct {
	grpc.ClientStream
}

func (x *talariaWriteClient) Send(m *WriteDataPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *talariaWriteClient) CloseAndRecv() (*WriteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *talariaClient) Read(ctx context.Context, in *BufferInfo, opts ...grpc.CallOption) (Talaria_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Talaria_serviceDesc.Streams[1], c.cc, "/pb.Talaria/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &talariaReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Talaria_ReadClient interface {
	Recv() (*ReadDataPacket, error)
	grpc.ClientStream
}

type talariaReadClient struct {
	grpc.ClientStream
}

func (x *talariaReadClient) Recv() (*ReadDataPacket, error) {
	m := new(ReadDataPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *talariaClient) Info(ctx context.Context, in *BufferInfo, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := grpc.Invoke(ctx, "/pb.Talaria/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Talaria service

type TalariaServer interface {
	Create(context.Context, *BufferInfo) (*CreateResponse, error)
	Write(Talaria_WriteServer) error
	Read(*BufferInfo, Talaria_ReadServer) error
	Info(context.Context, *BufferInfo) (*InfoResponse, error)
}

func RegisterTalariaServer(s *grpc.Server, srv TalariaServer) {
	s.RegisterService(&_Talaria_serviceDesc, srv)
}

func _Talaria_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufferInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalariaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Talaria/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalariaServer).Create(ctx, req.(*BufferInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Talaria_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TalariaServer).Write(&talariaWriteServer{stream})
}

type Talaria_WriteServer interface {
	SendAndClose(*WriteResponse) error
	Recv() (*WriteDataPacket, error)
	grpc.ServerStream
}

type talariaWriteServer struct {
	grpc.ServerStream
}

func (x *talariaWriteServer) SendAndClose(m *WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *talariaWriteServer) Recv() (*WriteDataPacket, error) {
	m := new(WriteDataPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Talaria_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BufferInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TalariaServer).Read(m, &talariaReadServer{stream})
}

type Talaria_ReadServer interface {
	Send(*ReadDataPacket) error
	grpc.ServerStream
}

type talariaReadServer struct {
	grpc.ServerStream
}

func (x *talariaReadServer) Send(m *ReadDataPacket) error {
	return x.ServerStream.SendMsg(m)
}

func _Talaria_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufferInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalariaServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Talaria/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalariaServer).Info(ctx, req.(*BufferInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Talaria_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Talaria",
	HandlerType: (*TalariaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Talaria_Create_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Talaria_Info_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _Talaria_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _Talaria_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("talaria.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0x4d, 0x4b, 0xfb, 0x40,
	0x10, 0xc6, 0xbb, 0x6d, 0xda, 0xfe, 0xff, 0x43, 0x9b, 0xd6, 0xd1, 0x43, 0xe8, 0x41, 0xc2, 0x9e,
	0x82, 0x87, 0x20, 0xf6, 0x03, 0x28, 0xbe, 0x41, 0x6f, 0xb2, 0x08, 0x9e, 0x27, 0x66, 0x22, 0x41,
	0xf3, 0xc2, 0x66, 0x0b, 0x7e, 0x46, 0x3f, 0x95, 0xec, 0xc6, 0xda, 0xa4, 0xd4, 0xdb, 0x3c, 0xb3,
	0xcf, 0xf0, 0xcc, 0xfe, 0x76, 0x61, 0x6e, 0xe8, 0x83, 0x74, 0x4e, 0x71, 0xad, 0x2b, 0x53, 0xe1,
	0xb0, 0x4e, 0x64, 0x0a, 0x70, 0xbb, 0xcd, 0x32, 0xd6, 0x9b, 0x32, 0xab, 0x10, 0xc1, 0x2b, 0xa9,
	0xe0, 0x40, 0x84, 0x22, 0xfa, 0xaf, 0x5c, 0x8d, 0xe7, 0x00, 0x8d, 0x21, 0x6d, 0x36, 0x65, 0xca,
	0x9f, 0xc1, 0x30, 0x14, 0x91, 0xa7, 0x3a, 0x1d, 0x94, 0x30, 0x73, 0xea, 0x51, 0x57, 0xc5, 0x43,
	0x99, 0x06, 0xa3, 0x50, 0x44, 0xff, 0x54, 0xaf, 0x27, 0xaf, 0x61, 0xf1, 0xa2, 0x73, 0xc3, 0xf7,
	0x64, 0xe8, 0x89, 0x5e, 0xdf, 0xd9, 0x1c, 0x8d, 0x0a, 0x60, 0x5a, 0x70, 0xd3, 0xd0, 0x1b, 0xbb,
	0x9c, 0x99, 0xda, 0x49, 0x79, 0x03, 0xbe, 0x62, 0x4a, 0x3b, 0xf3, 0x1d, 0xaf, 0xe8, 0x79, 0xf1,
	0x0c, 0xc6, 0x79, 0x67, 0xd7, 0x56, 0x48, 0x09, 0xfe, 0x9d, 0x66, 0x32, 0xac, 0xb8, 0xa9, 0xab,
	0xb2, 0x61, 0x5c, 0xc2, 0x68, 0xab, 0xf3, 0x9f, 0x05, 0x6c, 0x29, 0x17, 0x30, 0x77, 0x6b, 0xee,
	0x2c, 0x32, 0x84, 0x99, 0xe5, 0xf2, 0xf7, 0xc8, 0xd5, 0x97, 0x80, 0xe9, 0x73, 0x4b, 0x15, 0x63,
	0x98, 0xb4, 0x11, 0xe8, 0xc7, 0x75, 0x12, 0xef, 0xb9, 0xae, 0xd0, 0xea, 0x7e, 0xbc, 0x1c, 0xe0,
	0x1a, 0xc6, 0x2e, 0x0e, 0x4f, 0xed, 0xf1, 0x01, 0xa0, 0xd5, 0xc9, 0x6f, 0x73, 0x3f, 0x12, 0x09,
	0x8c, 0xc1, 0xb3, 0x24, 0x8e, 0x47, 0xf4, 0x19, 0xc9, 0xc1, 0xa5, 0xc0, 0x0b, 0xf0, 0xdc, 0xd3,
	0x1e, 0xfa, 0x97, 0x56, 0x77, 0x2f, 0x27, 0x07, 0xc9, 0xc4, 0xfd, 0x8b, 0xf5, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xf9, 0x4c, 0xd1, 0xb9, 0x28, 0x02, 0x00, 0x00,
}
