// Code generated by protoc-gen-go.
// source: scheduler.proto
// DO NOT EDIT!

package talaria

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CreateInfo) Reset()                    { *m = CreateInfo{} }
func (m *CreateInfo) String() string            { return proto.CompactTextString(m) }
func (*CreateInfo) ProtoMessage()               {}
func (*CreateInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *CreateInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateResponse struct {
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type ReadOnlyInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ReadOnlyInfo) Reset()                    { *m = ReadOnlyInfo{} }
func (m *ReadOnlyInfo) String() string            { return proto.CompactTextString(m) }
func (*ReadOnlyInfo) ProtoMessage()               {}
func (*ReadOnlyInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ReadOnlyInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ReadOnlyResponse struct {
}

func (m *ReadOnlyResponse) Reset()                    { *m = ReadOnlyResponse{} }
func (m *ReadOnlyResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadOnlyResponse) ProtoMessage()               {}
func (*ReadOnlyResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type ListInfo struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *ListInfo) Reset()                    { *m = ListInfo{} }
func (m *ListInfo) String() string            { return proto.CompactTextString(m) }
func (*ListInfo) ProtoMessage()               {}
func (*ListInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ListInfo) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type ListResponse struct {
	Info []*ClusterInfo `protobuf:"bytes,1,rep,name=info" json:"info,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ListResponse) GetInfo() []*ClusterInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type ClusterInfo struct {
	Name   string      `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Leader string      `protobuf:"bytes,2,opt,name=leader" json:"leader,omitempty"`
	Nodes  []*NodeInfo `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *ClusterInfo) Reset()                    { *m = ClusterInfo{} }
func (m *ClusterInfo) String() string            { return proto.CompactTextString(m) }
func (*ClusterInfo) ProtoMessage()               {}
func (*ClusterInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ClusterInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterInfo) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *ClusterInfo) GetNodes() []*NodeInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeInfo struct {
	URI string `protobuf:"bytes,1,opt,name=URI,json=uRI" json:"URI,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *NodeInfo) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateInfo)(nil), "talaria.CreateInfo")
	proto.RegisterType((*CreateResponse)(nil), "talaria.CreateResponse")
	proto.RegisterType((*ReadOnlyInfo)(nil), "talaria.ReadOnlyInfo")
	proto.RegisterType((*ReadOnlyResponse)(nil), "talaria.ReadOnlyResponse")
	proto.RegisterType((*ListInfo)(nil), "talaria.ListInfo")
	proto.RegisterType((*ListResponse)(nil), "talaria.ListResponse")
	proto.RegisterType((*ClusterInfo)(nil), "talaria.ClusterInfo")
	proto.RegisterType((*NodeInfo)(nil), "talaria.NodeInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scheduler service

type SchedulerClient interface {
	Create(ctx context.Context, in *CreateInfo, opts ...grpc.CallOption) (*CreateResponse, error)
	ReadOnly(ctx context.Context, in *ReadOnlyInfo, opts ...grpc.CallOption) (*ReadOnlyResponse, error)
	ListClusterInfo(ctx context.Context, in *ListInfo, opts ...grpc.CallOption) (*ListResponse, error)
}

type schedulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerClient(cc *grpc.ClientConn) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) Create(ctx context.Context, in *CreateInfo, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/talaria.Scheduler/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ReadOnly(ctx context.Context, in *ReadOnlyInfo, opts ...grpc.CallOption) (*ReadOnlyResponse, error) {
	out := new(ReadOnlyResponse)
	err := grpc.Invoke(ctx, "/talaria.Scheduler/ReadOnly", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) ListClusterInfo(ctx context.Context, in *ListInfo, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/talaria.Scheduler/ListClusterInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scheduler service

type SchedulerServer interface {
	Create(context.Context, *CreateInfo) (*CreateResponse, error)
	ReadOnly(context.Context, *ReadOnlyInfo) (*ReadOnlyResponse, error)
	ListClusterInfo(context.Context, *ListInfo) (*ListResponse, error)
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talaria.Scheduler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).Create(ctx, req.(*CreateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOnlyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talaria.Scheduler/ReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ReadOnly(ctx, req.(*ReadOnlyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_ListClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).ListClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/talaria.Scheduler/ListClusterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).ListClusterInfo(ctx, req.(*ListInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "talaria.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Scheduler_Create_Handler,
		},
		{
			MethodName: "ReadOnly",
			Handler:    _Scheduler_ReadOnly_Handler,
		},
		{
			MethodName: "ListClusterInfo",
			Handler:    _Scheduler_ListClusterInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler.proto",
}

func init() { proto.RegisterFile("scheduler.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x09, 0x69, 0x4b, 0x7b, 0xad, 0x68, 0x39, 0x5a, 0x08, 0x15, 0x43, 0xe4, 0x85, 0x4e,
	0x19, 0xca, 0xd2, 0x05, 0x96, 0x4e, 0x91, 0x10, 0x48, 0x46, 0x3c, 0x80, 0x4b, 0xae, 0x22, 0x52,
	0xb0, 0x2b, 0x3b, 0x19, 0x78, 0x3f, 0x1e, 0x0c, 0xc5, 0x89, 0x93, 0xf0, 0x6f, 0xf3, 0x7d, 0xfe,
	0xbe, 0xbb, 0xf3, 0x4f, 0x86, 0xa9, 0x79, 0x7d, 0xa3, 0xa4, 0xc8, 0x48, 0x47, 0x07, 0xad, 0x72,
	0x85, 0x27, 0xb9, 0xc8, 0x84, 0x4e, 0x05, 0x0b, 0x01, 0xb6, 0x9a, 0x44, 0x4e, 0xb1, 0xdc, 0x2b,
	0x44, 0xe8, 0x49, 0xf1, 0x4e, 0x81, 0x17, 0x7a, 0xab, 0x11, 0xb7, 0x67, 0x36, 0x83, 0xd3, 0xca,
	0xc1, 0xc9, 0x1c, 0x94, 0x34, 0xc4, 0x18, 0x4c, 0x38, 0x89, 0xe4, 0x49, 0x66, 0x1f, 0xff, 0xa6,
	0x10, 0x66, 0xce, 0xd3, 0xe4, 0x42, 0x18, 0x3e, 0xa4, 0x26, 0xb7, 0x99, 0x39, 0xf4, 0x4b, 0x9f,
	0x09, 0xbc, 0xd0, 0x5f, 0x8d, 0x78, 0x55, 0xb0, 0x0d, 0x4c, 0x4a, 0x87, 0x4b, 0xe0, 0x0a, 0x7a,
	0xa9, 0xdc, 0x2b, 0x6b, 0x1a, 0xaf, 0xe7, 0x51, 0xbd, 0x75, 0xb4, 0xcd, 0x0a, 0x93, 0x93, 0x2e,
	0x3b, 0x71, 0xeb, 0x60, 0x3b, 0x18, 0x77, 0xc4, 0xbf, 0x56, 0xc2, 0x0b, 0x18, 0x64, 0x24, 0x12,
	0xd2, 0xc1, 0xb1, 0x55, 0xeb, 0x0a, 0x6f, 0xa0, 0x2f, 0x55, 0x42, 0x26, 0xf0, 0xed, 0x94, 0xb3,
	0x66, 0xca, 0xa3, 0x4a, 0x2c, 0x16, 0x5e, 0xdd, 0xb3, 0x6b, 0x18, 0x3a, 0x09, 0x67, 0xe0, 0xbf,
	0xf0, 0xb8, 0xee, 0xef, 0x17, 0x3c, 0x5e, 0x7f, 0x7a, 0x30, 0x7a, 0x76, 0x98, 0x71, 0x03, 0x83,
	0x8a, 0x1a, 0x9e, 0xb7, 0x5b, 0x37, 0xa0, 0x97, 0x97, 0x3f, 0xc4, 0x86, 0xd1, 0x11, 0xde, 0xc3,
	0xd0, 0x91, 0xc3, 0x45, 0x63, 0xeb, 0x02, 0x5f, 0x5e, 0xfd, 0x92, 0x3b, 0xf9, 0x3b, 0x98, 0x96,
	0x0c, 0xbb, 0x34, 0xda, 0x27, 0x39, 0xfe, 0xcb, 0xc5, 0x37, 0xa9, 0x8d, 0xef, 0x06, 0xf6, 0x83,
	0xdc, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x13, 0xa5, 0x04, 0x58, 0x33, 0x02, 0x00, 0x00,
}
