// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package server_test

import (
	"github.com/apoydence/talaria/api/intra"
	pb "github.com/apoydence/talaria/api/v1"
	"github.com/apoydence/talaria/scheduler/internal/server"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

type mockNodeClient struct {
	CreateCalled chan bool
	CreateInput  struct {
		Ctx  chan context.Context
		In   chan *intra.CreateInfo
		Opts chan []grpc.CallOption
	}
	CreateOutput struct {
		Ret0 chan *intra.CreateResponse
		Ret1 chan error
	}
	LeaderCalled chan bool
	LeaderInput  struct {
		Ctx  chan context.Context
		In   chan *intra.LeaderRequest
		Opts chan []grpc.CallOption
	}
	LeaderOutput struct {
		Ret0 chan *intra.LeaderResponse
		Ret1 chan error
	}
	UpdateConfigCalled chan bool
	UpdateConfigInput  struct {
		Ctx  chan context.Context
		In   chan *intra.UpdateConfigRequest
		Opts chan []grpc.CallOption
	}
	UpdateConfigOutput struct {
		Ret0 chan *intra.UpdateConfigResponse
		Ret1 chan error
	}
	StatusCalled chan bool
	StatusInput  struct {
		Ctx  chan context.Context
		In   chan *intra.StatusRequest
		Opts chan []grpc.CallOption
	}
	StatusOutput struct {
		Ret0 chan *intra.StatusResponse
		Ret1 chan error
	}
}

func newMockNodeClient() *mockNodeClient {
	m := &mockNodeClient{}
	m.CreateCalled = make(chan bool, 100)
	m.CreateInput.Ctx = make(chan context.Context, 100)
	m.CreateInput.In = make(chan *intra.CreateInfo, 100)
	m.CreateInput.Opts = make(chan []grpc.CallOption, 100)
	m.CreateOutput.Ret0 = make(chan *intra.CreateResponse, 100)
	m.CreateOutput.Ret1 = make(chan error, 100)
	m.LeaderCalled = make(chan bool, 100)
	m.LeaderInput.Ctx = make(chan context.Context, 100)
	m.LeaderInput.In = make(chan *intra.LeaderRequest, 100)
	m.LeaderInput.Opts = make(chan []grpc.CallOption, 100)
	m.LeaderOutput.Ret0 = make(chan *intra.LeaderResponse, 100)
	m.LeaderOutput.Ret1 = make(chan error, 100)
	m.UpdateConfigCalled = make(chan bool, 100)
	m.UpdateConfigInput.Ctx = make(chan context.Context, 100)
	m.UpdateConfigInput.In = make(chan *intra.UpdateConfigRequest, 100)
	m.UpdateConfigInput.Opts = make(chan []grpc.CallOption, 100)
	m.UpdateConfigOutput.Ret0 = make(chan *intra.UpdateConfigResponse, 100)
	m.UpdateConfigOutput.Ret1 = make(chan error, 100)
	m.StatusCalled = make(chan bool, 100)
	m.StatusInput.Ctx = make(chan context.Context, 100)
	m.StatusInput.In = make(chan *intra.StatusRequest, 100)
	m.StatusInput.Opts = make(chan []grpc.CallOption, 100)
	m.StatusOutput.Ret0 = make(chan *intra.StatusResponse, 100)
	m.StatusOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockNodeClient) Create(ctx context.Context, in *intra.CreateInfo, opts ...grpc.CallOption) (*intra.CreateResponse, error) {
	m.CreateCalled <- true
	m.CreateInput.Ctx <- ctx
	m.CreateInput.In <- in
	m.CreateInput.Opts <- opts
	return <-m.CreateOutput.Ret0, <-m.CreateOutput.Ret1
}
func (m *mockNodeClient) Leader(ctx context.Context, in *intra.LeaderRequest, opts ...grpc.CallOption) (*intra.LeaderResponse, error) {
	m.LeaderCalled <- true
	m.LeaderInput.Ctx <- ctx
	m.LeaderInput.In <- in
	m.LeaderInput.Opts <- opts
	return <-m.LeaderOutput.Ret0, <-m.LeaderOutput.Ret1
}
func (m *mockNodeClient) UpdateConfig(ctx context.Context, in *intra.UpdateConfigRequest, opts ...grpc.CallOption) (*intra.UpdateConfigResponse, error) {
	m.UpdateConfigCalled <- true
	m.UpdateConfigInput.Ctx <- ctx
	m.UpdateConfigInput.In <- in
	m.UpdateConfigInput.Opts <- opts
	return <-m.UpdateConfigOutput.Ret0, <-m.UpdateConfigOutput.Ret1
}
func (m *mockNodeClient) Status(ctx context.Context, in *intra.StatusRequest, opts ...grpc.CallOption) (*intra.StatusResponse, error) {
	m.StatusCalled <- true
	m.StatusInput.Ctx <- ctx
	m.StatusInput.In <- in
	m.StatusInput.Opts <- opts
	return <-m.StatusOutput.Ret0, <-m.StatusOutput.Ret1
}

type mockAuditor struct {
	ListCalled chan bool
	ListOutput struct {
		Ret0 chan pb.ListResponse
	}
}

func newMockAuditor() *mockAuditor {
	m := &mockAuditor{}
	m.ListCalled = make(chan bool, 100)
	m.ListOutput.Ret0 = make(chan pb.ListResponse, 100)
	return m
}
func (m *mockAuditor) List() pb.ListResponse {
	m.ListCalled <- true
	return <-m.ListOutput.Ret0
}

type mockNodeFetcher struct {
	FetchNodesCalled chan bool
	FetchNodesInput  struct {
		Count   chan int
		Exclude chan []server.NodeInfo
	}
	FetchNodesOutput struct {
		Client chan []server.NodeInfo
	}
	FetchNodeCalled chan bool
	FetchNodeInput  struct {
		Addr chan string
	}
	FetchNodeOutput struct {
		Node chan server.NodeInfo
		Err  chan error
	}
}

func newMockNodeFetcher() *mockNodeFetcher {
	m := &mockNodeFetcher{}
	m.FetchNodesCalled = make(chan bool, 100)
	m.FetchNodesInput.Count = make(chan int, 100)
	m.FetchNodesInput.Exclude = make(chan []server.NodeInfo, 100)
	m.FetchNodesOutput.Client = make(chan []server.NodeInfo, 100)
	m.FetchNodeCalled = make(chan bool, 100)
	m.FetchNodeInput.Addr = make(chan string, 100)
	m.FetchNodeOutput.Node = make(chan server.NodeInfo, 100)
	m.FetchNodeOutput.Err = make(chan error, 100)
	return m
}
func (m *mockNodeFetcher) FetchNodes(count int, exclude ...server.NodeInfo) (client []server.NodeInfo) {
	m.FetchNodesCalled <- true
	m.FetchNodesInput.Count <- count
	m.FetchNodesInput.Exclude <- exclude
	return <-m.FetchNodesOutput.Client
}
func (m *mockNodeFetcher) FetchNode(addr string) (node server.NodeInfo, err error) {
	m.FetchNodeCalled <- true
	m.FetchNodeInput.Addr <- addr
	return <-m.FetchNodeOutput.Node, <-m.FetchNodeOutput.Err
}
