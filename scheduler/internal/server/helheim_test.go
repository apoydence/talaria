// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package server_test

import (
	"golang.org/x/net/context"

	"github.com/apoydence/talaria/pb/intra"
	"google.golang.org/grpc"
)

type mockNodeFetcher struct {
	FetchNodeCalled chan bool
	FetchNodeOutput struct {
		Ret0 chan intra.NodeClient
	}
}

func newMockNodeFetcher() *mockNodeFetcher {
	m := &mockNodeFetcher{}
	m.FetchNodeCalled = make(chan bool, 100)
	m.FetchNodeOutput.Ret0 = make(chan intra.NodeClient, 100)
	return m
}
func (m *mockNodeFetcher) FetchNode() intra.NodeClient {
	m.FetchNodeCalled <- true
	return <-m.FetchNodeOutput.Ret0
}

type mockNodeClient struct {
	CreateCalled chan bool
	CreateInput  struct {
		Ctx  chan context.Context
		In   chan *intra.CreateInfo
		Opts chan []grpc.CallOption
	}
	CreateOutput struct {
		Ret0 chan *intra.CreateResponse
		Ret1 chan error
	}
}

func newMockNodeClient() *mockNodeClient {
	m := &mockNodeClient{}
	m.CreateCalled = make(chan bool, 100)
	m.CreateInput.Ctx = make(chan context.Context, 100)
	m.CreateInput.In = make(chan *intra.CreateInfo, 100)
	m.CreateInput.Opts = make(chan []grpc.CallOption, 100)
	m.CreateOutput.Ret0 = make(chan *intra.CreateResponse, 100)
	m.CreateOutput.Ret1 = make(chan error, 100)
	return m
}
func (m *mockNodeClient) Create(ctx context.Context, in *intra.CreateInfo, opts ...grpc.CallOption) (*intra.CreateResponse, error) {
	m.CreateCalled <- true
	m.CreateInput.Ctx <- ctx
	m.CreateInput.In <- in
	m.CreateInput.Opts <- opts
	return <-m.CreateOutput.Ret0, <-m.CreateOutput.Ret1
}
